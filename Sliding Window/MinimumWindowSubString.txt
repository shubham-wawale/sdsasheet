// Maintain a map of character count for characters in String that
// Maintain a variable matched that tracks how many characters from the map has been matched in the minWindow
// when matched reaches map size, update the minLenth variable
// while iterating, when a matching character from the map is found, decrease its count

class Solution {
    public String minWindow(String s, String t) {
        Map<Character, Integer> map = new HashMap<>();
        int matched = 0;
        int minLength = s.length()+1;
        int l = 0;
        int subStr = 0;

        for (char c : t.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }

        for(int r=0; r<s.length();r++){
            char right = s.charAt(r);
            if(map.containsKey(right)){
                map.put(right, map.get(right)-1);
                if(map.get(right)==0){
                    matched++;
                }
            }
            while(matched==map.size()){
                if(minLength > r-l+1){
                    minLength = r-l+1;
                    subStr = l;
                }
                char deleted = s.charAt(l++);
                if(map.containsKey(deleted)){
                    //because if it was zero, the matched variable was incremented
                    if(map.get(deleted)==0){
                        matched--;
                    }
                    map.put(deleted, map.get(deleted)+1);
                }

            }
        }

        return minLength > s.length() ? "" : s.substring(subStr, subStr+minLength);

    }
}