class Solution
{
    //Function to find the minimum number of platforms required at the
    //railway station such that no train waits.
    static int findPlatform(int arr[], int dep[], int n)
    {
        // add your code here
        TrainTiming[] trains = new TrainTiming[arr.length];
        for(int i=0; i<arr.length; i++){
            trains[i] = new TrainTiming(arr[i], dep[i]);
        }
        Arrays.sort(trains, new SortTrainArrivals());
        PriorityQueue<Integer> platforms = new PriorityQueue<>();
        platforms.add(trains[0].dept);
        int result = 1;
        // System.out.println(platforms);
        for(int i=1; i<trains.length; i++){
            
                if(trains[i].arr > platforms.peek()){
                    platforms.poll();
                } else {
                    result++;
                }
                platforms.add(trains[i].dept);
        }
        return result;
        
    }
    
}

class TrainTiming {
    public int arr;
    public int dept;
    
    public TrainTiming(int arr, int dept) {
        this.arr = arr;
        this.dept = dept;
    }
}

class SortTrainArrivals implements Comparator<TrainTiming> {
    @Override
    public int compare(TrainTiming t1, TrainTiming t2){
        if(t1.arr>t2.arr){
            return 1;
        } else if(t1.arr<t2.arr){
            return -1;
        }
        return 1;
    }
}