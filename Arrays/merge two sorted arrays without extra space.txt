public class Solution {
    public static void mergeTwoSortedArraysWithoutExtraSpace(long []a, long []b){
        // Write your code here.
        int left = a.length-1;
        int right = 0;
        while(left>=0 && right<b.length){
            if(a[left]>b[right]){
                long temp = a[left];
                a[left] = b[right];
                b[right] = temp;
            }
            left--;
            right++;
            if(a[left]<=b[right]){
                break;
            }
            
        }
        Arrays.sort(a);
        Arrays.sort(b);
    }
}

//non optimal Solution
public static void main(String[] args) {
		PriorityQueue<Integer> pq= new PriorityQueue<>();
        long[] max = a.length >b.length ? a : b; 
        long[] min = a.length >b.length ? b : a;
        for(int i=0; i<min.length; i++){
            pq.add(min[i]);
        }

        for(int i=max.length-1; i>=0; i--){
            if(max[i]>pq.peek()){
                int temp = pq.peek();
                pq.poll();
                pq.add(max[i]);
                max[i] = temp;
            }
        }

        Arrays.sort(max);
        for(int i=0; i<min.length; i++){
            min[i] = pq.poll();
        }
        System.out.println(Arrays.toString(max));
        System.out.println(Arrays.toString(min));
        a = max;
        b = min;
	}